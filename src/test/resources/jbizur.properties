logger.level=DEBUG
logger.file=./config/log/log-%s.txt
logger.pattern=[{level}] {date:HH:mm:ss:SSS} {class}.{method}(): {message}
#logger.pattern={date:HH:mm:ss:SSS} [{level}] {thread}-{class}.{method}(): {message}

node.connectionprotocol=TCP
#node.ip=127.0.0.1
#node.portinit=0
#node.multicastgroup=all-systems.mcast.net
node.multicastgroup=230.0.0.1
node.multicastport=54321
node.multicast.intervalms=1000
#Timeout (in seconds) for responses between the processes.
node.response_timeout_sec=5
#Number of times to retry the failing message.
node.send_fail_retry_count=1
#Max interval (in sec) to wait between election cycles.
node.max_election_wait_sec=5
node.count=3

member.idformat=member%d

client.count=5
client.id=client
#client.ip=127.0.0.1
client.port=0

bizur.bucketcount=50
bizur.bucket_elect_retry_count=5

protocol.server.class=ee.ut.jbizur.network.messenger.tcp.custom.BlockingServerImpl
protocol.client.class=ee.ut.jbizur.network.messenger.tcp.custom.BlockingClientImpl
#protocol.server.class=ee.ut.jbizur.network.messenger.tcp.netty.NettyServer
#protocol.client.class=ee.ut.jbizur.network.messenger.tcp.netty.NettyClient
#protocol.server.class=ee.ut.jbizur.network.messenger.tcp.rapidoid.RapidoidServer
#protocol.client.class=ee.ut.jbizur.network.messenger.tcp.rapidoid.RapidoidBlockingClient

# true = always-open connection, false = open-close connection
protocol.tcp.keepalive=true

#_send/recv tcp messages as BYTE or OBJECT
protocol.tcp.sendrecv.type=OBJECT
#if protocol.tcp.sendrecv.type is BYTE, then this property must be set
protocol.serializer.class=ee.ut.jbizur.protocol.ByteSerializer


######## CUSTOM TEST PROPERTIES
test.functional.keyValueSetGetTest=50
test.functional.keyValueSetGetMultiThreadTest=50
test.functional.keyValueDeleteTest=50
test.functional.keyValueDeleteMultiThreadTest=50
test.functional.iterateKeysTest=50